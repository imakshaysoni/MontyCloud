# Create dynamodb Tableaws --endpoint-url=http://localhost:4566 dynamodb create-table --table-name user-images --attribute-definitions AttributeName=imageId,AttributeType=S --key-schema AttributeName=imageId,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5# Create S3 Bucketaws --endpoint-url http://localhost:4566 s3 mb s3://images# Create a Lambda function from a local zip fileaws --endpoint-url=http://localhost:4566 lambda create-function \    --function-name monty_cloud_lambda \    --runtime python3.8 \    --role arn:aws:iam::000000000000:role/lambda-role \    --handler lambda_function.handler \    --zip-file fileb:///Users/akshay.soni/Documents/Personal/MontyCloud.zip# Output{    "FunctionName": "monty_cloud_lambda",    "FunctionArn": "arn:aws:lambda:us-east-1:000000000000:function:monty_cloud_lambda",    "Runtime": "python3.8",    "Role": "arn:aws:iam::000000000000:role/lambda-role",    "Handler": "lambda_function.handler",    "CodeSize": 42819,    "Description": "",    "Timeout": 3,    "MemorySize": 128,    "LastModified": "2024-06-27T04:24:51.414972+0000",    "CodeSha256": "3R50dIvvejNZZNfKRhzBW5pz2upuLmqQK8HH7J+EQJU=",    "Version": "$LATEST",    "TracingConfig": {        "Mode": "PassThrough"    },    "RevisionId": "a0bc80cd-b800-480a-b716-243c74d71fd5",    "State": "Pending",    "StateReason": "The function is being created.",    "StateReasonCode": "Creating",    "PackageType": "Zip",    "Architectures": [        "x86_64"    ],    "EphemeralStorage": {        "Size": 512    },    "SnapStart": {        "ApplyOn": "None",        "OptimizationStatus": "Off"    },    "RuntimeVersionConfig": {        "RuntimeVersionArn": "arn:aws:lambda:us-east-1::runtime:8eeff65f6809a3ce81507fe733fe09b835899b99481ba22fd75b5a7338290ec1"    },    "LoggingConfig": {        "LogFormat": "Text",        "LogGroup": "/aws/lambda/monty_cloud_lambda"    }}# Create API Gatewayaws --endpoint-url=http://localhost:4566 apigateway create-rest-api \    --name monty_cloud_rest_api# Output{    "id": "3bb16oql5g",    "name": "monty_cloud_rest_api",    "createdDate": "2024-06-27T09:55:30+05:30",    "apiKeySource": "HEADER",    "endpointConfiguration": {        "types": [            "EDGE"        ]    },    "disableExecuteApiEndpoint": false,    "rootResourceId": "4atpiei9f0"}# Creating resources & methods# Create a resource in the REST APIaws --endpoint-url=http://localhost:4566 apigateway create-resource \    --rest-api-id 3bb16oql5g \    --parent-id 4atpiei9f0 \    --path-part image# Output{    "id": "mme8g41gk4",    "parentId": "4atpiei9f0",    "pathPart": "image",    "path": "/image"}# Create a method (e.g., POST) for the resourceaws --endpoint-url=http://localhost:4566 apigateway put-method \    --rest-api-id 3bb16oql5g \    --resource-id mme8g41gk4 \    --http-method POST \    --authorization-type NONE#output{    "httpMethod": "POST",    "authorizationType": "NONE",    "apiKeyRequired": false}# Create a deployment for the REST APIaws --endpoint-url=http://localhost:4566 apigateway create-deployment \    --rest-api-id 3bb16oql5g \    --stage-name dev# Output{    "id": "daetmigznm",    "createdDate": "2024-06-27T10:09:41+05:30"}# Create API Keysaws --endpoint-url=http://localhost:4566 apigateway create-api-key \    --name monty_cloud_api_key \    --enabled# Output{    "id": "j2ybxfoert",    "value": "cMjIXy6UFAvtuowahpn7bLl0Bg3reWZQz8dJiVGY",    "name": "monty_cloud_api_key",    "enabled": true,    "createdDate": "2024-06-27T10:02:36+05:30",    "lastUpdatedDate": "2024-06-27T10:02:36+05:30",    "stageKeys": []}# Create a usage planaws --endpoint-url=http://localhost:4566 apigateway create-usage-plan \    --name monty_cloud_usage_plan \    --api-stages apiId=3bb16oql5g,stage=dev# Output{    "id": "lpi8qk7dk6",    "name": "monty_cloud_usage_plan",    "apiStages": [        {            "apiId": "3bb16oql5g",            "stage": "dev"        }    ]}# Associate the API key with the usage planaws --endpoint-url=http://localhost:4566 apigateway create-usage-plan-key \    --usage-plan-id lpi8qk7dk6 \    --key-id j2ybxfoert \    --key-type API_KEY# Output{    "id": "j2ybxfoert",    "type": "API_KEY",    "value": "cMjIXy6UFAvtuowahpn7bLl0Bg3reWZQz8dJiVGY",    "name": "monty_cloud_api_key"}# Add Lambda function integration to API Gateway methodaws --endpoint-url=http://localhost:4566 apigateway put-integration \    --rest-api-id 3bb16oql5g \    --resource-id mme8g41gk4 \    --http-method POST \    --type AWS_PROXY \    --integration-http-method POST \    --uri arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:000000000000:function:monty_cloud_lambda/invocations# Output{    "type": "AWS_PROXY",    "httpMethod": "POST",    "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:000000000000:function:monty_cloud_lambda/invocations",    "passthroughBehavior": "WHEN_NO_MATCH",    "timeoutInMillis": 29000,    "cacheNamespace": "mme8g41gk4",    "cacheKeyParameters": []}# Enable API key authorization for the API Gateway methodaws --endpoint-url=http://localhost:4566 apigateway update-method \   --rest-api-id 3bb16oql5g \    --resource-id mme8g41gk4 \    --http-method POST \    --patch-operations op=replace,path=/apiKeyRequired,value=true#output{    "httpMethod": "POST",    "authorizationType": "NONE",    "apiKeyRequired": true,    "methodIntegration": {        "type": "AWS_PROXY",        "httpMethod": "POST",        "uri": "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:000000000000:function:monty_cloud_lambda/invocations",        "passthroughBehavior": "WHEN_NO_MATCH",        "timeoutInMillis": 29000,        "cacheNamespace": "mme8g41gk4",        "cacheKeyParameters": []    }}